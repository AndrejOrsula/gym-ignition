ARG from=ubuntu:bionic
FROM ${from}

# Install tools and toolchain
RUN apt-get update &&\
    apt-get install -y --no-install-recommends \
        wget \
        software-properties-common \
        apt-transport-https \
        apt-utils \
        gnupg2 \
        nano \
        rename \
        source-highlight \
        &&\
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add - && \
    apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main' &&\
    apt-get update &&\
    apt-get install -y --no-install-recommends \
        git \
        g++ \
        g++-8 \
        clang \
        clang-7 \
        clang-8 \
        make \
        cmake \
        cmake-curses-gui \
        ninja-build \
        valgrind \
        libgflags-dev \
        python3-pip \
        python3.6 \
        python3.7 \
        libpython3.6-dev \
        libpython3.7-dev \
        virtualenv \
        &&\
    rm -rf /var/lib/apt/lists/*

# Update git (required by actions/checkout)
RUN add-apt-repository ppa:git-core/ppa &&\
    apt-get update &&\
    apt install -y --no-install-recommends git &&\
    rm -rf /var/lib/apt/lists/*

# Install SWIG from sources
ARG SWIG_REL="rel-4.0.1"
RUN apt-get update &&\
    apt-get install -y --no-install-recommends \
        autotools-dev \
        automake \
        bison \
        libpcre3-dev &&\
    rm -rf /var/lib/apt/lists/* &&\
    cd /tmp/ &&\
    git clone --depth 1 -b ${SWIG_REL} https://github.com/swig/swig.git &&\
    cd swig &&\
    sh autogen.sh &&\
    ./configure &&\
    make -j2 &&\
    make install &&\
    rm -r /tmp/swig

# Install ignition robotics
ARG ignition_codename="citadel"
RUN echo "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable `lsb_release -cs` main" \
        > /etc/apt/sources.list.d/gazebo-stable.list &&\
    wget http://packages.osrfoundation.org/gazebo.key -O - | apt-key add - &&\
    apt-get update &&\
    apt-get install -y --no-install-recommends ignition-${ignition_codename} &&\
    rm -rf /var/lib/apt/lists/*

# Install idyntree
RUN apt-get update &&\
    apt-get install -y --no-install-recommends python3-numpy libxml2-dev coinor-libipopt-dev libeigen3-dev &&\
    rm -rf /var/lib/apt/lists/* &&\
    git clone --depth 1 -b feature/numpy-and-ik https://github.com/diegoferigo/idyntree /tmp/idyntree &&\
    mkdir -p /tmp/idyntree/build && cd /tmp/idyntree/build &&\
    cmake .. \
        -GNinja \
        -DCMAKE_BUILD_TYPE=Release \
        -DIDYNTREE_USES_PYTHON=True \
        -DPython_ADDITIONAL_VERSIONS=3.6 \
        -DIDYNTREE_USES_PYTHON_VERSION=3.6 \
        -DPYTHON_NUMPY_INCLUDE_DIR:PATH=/usr/lib/python3/dist-packages/numpy/core/include \
        -DIDYNTREE_USES_IPOPT:BOOL=ON \
        &&\
    cmake --build . --target install &&\
    rm -r /tmp/idyntree
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib
ENV PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python3/dist-packages

# Apply minor patches to ign-gazebo
RUN apt-get update &&\
    apt-get install -y --no-install-recommends mercurial &&\
    rm -rf /var/lib/apt/lists/* &&\
    dpkg -r --force-depends \
        libignition-gazebo3 \
        libignition-gazebo3-plugins \
        libignition-gazebo3-dev &&\
    cd /tmp &&\
    hg clone -u ign-gazebo3 https://bitbucket.org/ignitionrobotics/ign-gazebo &&\
    cd ign-gazebo &&\
    wget -q -O - https://gist.github.com/diegoferigo/ef860a73e5fc58d6236369ed684bf52e/raw/43cb64624b7c02a06dd120cb781bbbdd8e6b2173/SimulationRunner.patch | patch -p0 &&\
    wget -q -O - https://gist.github.com/diegoferigo/ef860a73e5fc58d6236369ed684bf52e/raw/43cb64624b7c02a06dd120cb781bbbdd8e6b2173/RenderUtil.patch | patch -p0 &&\
    mkdir build && cd build &&\
    cmake \
        -GNinja -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=RelWithDebInfo .. \
        -DBUILD_TESTING:BOOL=OFF \
        .. &&\
    ninja install

# Setup gym-ignition if installed from source
ARG install_prefix="/usr/local"
ENV PYTHONPATH="${PYTHONPATH}:${install_prefix}/lib/python3.6/site-packages:${install_prefix}/lib/python3.7/site-packages"

# Prepare virtualenv variables
ENV VIRTUAL_ENV=/venv
ENV PATH=${VIRTUAL_ENV}/bin:${PATH}

COPY entrypoint.sh /entrypoint.sh
COPY setup_virtualenv.sh /setup_virtualenv.sh
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]
